/*----- PROTECTED REGION ID(Teledyne.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        Teledyne.cpp
//
// description : C++ source for the Teledyne class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Teledyne are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <tango.h>
#include <helpers/PogoHelper.h>

#include <Teledyne.h>
#include <TeledyneClass.h>

/*----- PROTECTED REGION END -----*/	//	Teledyne.cpp

/**
 *  Teledyne class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  dev_state
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  detector_model     |  Tango::DevString	Scalar
//  detector_type      |  Tango::DevString	Scalar
//  temperature        |  Tango::DevDouble	Scalar
//  temperatureTarget  |  Tango::DevDouble	Scalar
//  gain               |  Tango::DevEnum	Scalar
//  adcRate            |  Tango::DevDouble	Scalar
//================================================================

namespace Teledyne_ns
{
/*----- PROTECTED REGION ID(Teledyne::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Teledyne::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Teledyne::Teledyne()
 *	Description : Constructors for a Tango device
 *                implementing the classTeledyne
 */
//--------------------------------------------------------
Teledyne::Teledyne(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Teledyne::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::constructor_1
}
//--------------------------------------------------------
Teledyne::Teledyne(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Teledyne::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::constructor_2
}
//--------------------------------------------------------
Teledyne::Teledyne(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Teledyne::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Teledyne::delete_device()
{
	DEBUG_STREAM << "Teledyne::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Teledyne::delete_device) ENABLED START -----*/
	INFO_STREAM << "Teledyne::delete_device() delete device " << device_name << endl;

	DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);	
	DELETE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read);	
    DELETE_SCALAR_ATTRIBUTE(attr_gain_read);    
	DELETE_SCALAR_ATTRIBUTE(attr_adcRate_read);	

	DELETE_DEVSTRING_ATTRIBUTE(attr_detector_model_read);	
	DELETE_DEVSTRING_ATTRIBUTE(attr_detector_type_read);		

	//	Delete device allocated objects
	INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Teledyne::init_device()
{
	DEBUG_STREAM << "Teledyne::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Teledyne::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	CREATE_SCALAR_ATTRIBUTE(attr_temperature_read, 0.0);
	CREATE_SCALAR_ATTRIBUTE(attr_temperatureTarget_read, 0.0);		
    CREATE_SCALAR_ATTRIBUTE(attr_gain_read, (gainEnum)GainMode::LOW);
	CREATE_SCALAR_ATTRIBUTE(attr_adcRate_read, 0.0);

	CREATE_DEVSTRING_ATTRIBUTE(attr_detector_model_read,MAX_ATTRIBUTE_STRING_LENGTH);	
	CREATE_DEVSTRING_ATTRIBUTE(attr_detector_type_read,MAX_ATTRIBUTE_STRING_LENGTH);	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(Teledyne::init_device) ENABLED START -----*/

	Tango::Attribute &gain_attribute = get_device_attr()->get_attr_by_name("gain");
	Tango::MultiAttrProp<Tango::DevEnum> multi_prop_gain_attribute;
	gain_attribute.get_properties(multi_prop_gain_attribute);
	
	multi_prop_gain_attribute.enum_labels = {"LOW", "MEDIUM", "HIGH"};
	gain_attribute.set_properties(multi_prop_gain_attribute);

	//	Initialize device
	m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");

	INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

    try
    {
		//- get the main object used to pilot the lima framework
		//- in fact LimaDetector is create the singleton control objet
		//so this call, will only return existing object, no need to give it the ip !!
		m_ct = ControlFactory::instance().get_control("Teledyne");
		
		if(m_ct)
		{
			//- get interface to specific camera
			m_hw = dynamic_cast<lima::Princeton::Interface*>(m_ct->hwInterface());
		}
    }
    catch(Exception& e)
    {
        INFO_STREAM<<"Initialization Failed : "<<e.getErrMsg()<<endl;
        m_status_message <<"Initialization Failed : "<<e.getErrMsg( )<< endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch(...)
    {
        INFO_STREAM<<"Initialization Failed : UNKNOWN"<<endl;
        m_status_message <<"Initialization Failed : UNKNOWN"<< endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

	//write attributes at init
	try
	{
		INFO_STREAM << "Write tango hardware at Init - temperatureTarget." << endl;
		transform(temperatureTargetAtInit.begin(), temperatureTargetAtInit.end(), temperatureTargetAtInit.begin(), ::toupper);
		Tango::WAttribute &temperatureTarget = dev_attr->get_w_attr_by_name("temperatureTarget");
        temperatureTarget.set_write_value(temperatureTargetAtInit);
		write_temperatureTarget(temperatureTarget);

		INFO_STREAM << "Write tango hardware at Init - gain." << endl;
		Tango::WAttribute &gain = dev_attr->get_w_attr_by_name("gain");
		*attr_gain_read = (gainEnum)yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "gain");
		gain.set_write_value(*attr_gain_read);
		write_gain(gain);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : ";
		for(unsigned i = 0;i < df.errors.length();i++)
		{
			m_status_message << df.errors[i].desc << endl;
		}
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}

	m_is_device_initialized = true;		
    set_state(Tango::STANDBY);
    dev_state();
	/*----- PROTECTED REGION END -----*/	//	Teledyne::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Teledyne::get_device_property()
{
	/*----- PROTECTED REGION ID(Teledyne::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("TemperatureTargetAtInit"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TeledyneClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TeledyneClass	*ds_class =
			(static_cast<TeledyneClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize TemperatureTargetAtInit from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  temperatureTargetAtInit;
		else {
			//	Try to initialize TemperatureTargetAtInit from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  temperatureTargetAtInit;
		}
		//	And try to extract TemperatureTargetAtInit value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  temperatureTargetAtInit;

	}

	/*----- PROTECTED REGION ID(Teledyne::get_device_property_after) ENABLED START -----*/
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop,"-110","TemperatureTargetAtInit");	            

	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Teledyne::always_executed_hook()
{
	//DEBUG_STREAM << "Teledyne::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Teledyne::always_executed_hook) ENABLED START -----*/
	//	code always executed before all requests
	try
	{
		yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
		m_status_message.str("");
		//- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("Teledyne");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Princeton::Interface*> (m_ct->hwInterface());

		dev_state();
	}
	catch (Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	catch (Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : " << string(df.errors[0].desc) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	/*----- PROTECTED REGION END -----*/	//	Teledyne::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Teledyne::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	//DEBUG_STREAM << "Teledyne::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Teledyne::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Teledyne::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Teledyne::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute detector_model related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_detector_model(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Teledyne::read_detector_model(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_detector_model) ENABLED START -----*/
	try
	{
		HwDetInfoCtrlObj *hw_det_info;
		//lima::Princeton::DetInfoCtrlObj *hw_det_info;
		std::string str_detector_model = "MODEL_TEST";
		if( m_hw != 0)
		{
			m_hw->getHwCtrlObj(hw_det_info);
			hw_det_info->getDetectorModel(str_detector_model);
		}
		//	Set the attribute value
		strcpy(*attr_detector_model_read, str_detector_model.c_str());
		attr.set_value(attr_detector_model_read);
	}
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
		Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
                	std::string(df.errors[0].desc).c_str(),
                	"Teledyne::read_detector_model");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    "TANGO_DEVICE_ERROR",
                    e.getErrMsg().c_str(),
                    "Teledyne::read_detector_model");
    }	 
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_detector_model
}
//--------------------------------------------------------
/**
 *	Read attribute detector_type related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_detector_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Teledyne::read_detector_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_detector_type) ENABLED START -----*/
	try
	{
		HwDetInfoCtrlObj *hw_det_info;
		//lima::Princeton::DetInfoCtrlObj *hw_det_info;
		std::string str_detector_type = "TYPE_TEST";
		
		if( m_hw != 0)
		{
			m_hw->getHwCtrlObj(hw_det_info);
			hw_det_info->getDetectorModel(str_detector_type);
		}
		//	Set the attribute value
		strcpy(*attr_detector_type_read, str_detector_type.c_str());
		attr.set_value(attr_detector_type_read);
	}
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    "TANGO_DEVICE_ERROR",
                    string(df.errors[0].desc).c_str(),
                    "Teledyne::read_detector_type");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     "TANGO_DEVICE_ERROR",
                     e.getErrMsg().c_str(),
                     "Teledyne::read_detector_type");
    }	 
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_detector_type
}
//--------------------------------------------------------
/**
 *	Read attribute temperature related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Teledyne::read_temperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_temperature) ENABLED START -----*/
	try
	{
		if( m_hw != 0)
		{
			*attr_temperature_read  = m_hw->getSensorTemperature();
			attr.set_value(attr_temperature_read);
		}
		
	}
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
		Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
                	std::string(df.errors[0].desc).c_str(),
                	"Teledyne::read_temperature");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    "TANGO_DEVICE_ERROR",
                    e.getErrMsg().c_str(),
                    "Teledyne::read_temperature");
    }	 

	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_temperature
}
//--------------------------------------------------------
/**
 *	Read attribute temperatureTarget related method
 *	Description: Set the Temperature target of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_temperatureTarget(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Teledyne::read_temperatureTarget(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_temperatureTarget) ENABLED START -----*/
	
	try 
	{
		if( m_hw != 0)
		{
			*attr_temperatureTarget_read  = m_hw->getSensorTemperatureSetpoint();   
			attr.set_value(attr_temperatureTarget_read);
		}
	}
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
		Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
                	std::string(df.errors[0].desc).c_str(),
                	"Teledyne::read_temperatureTarget");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    "TANGO_DEVICE_ERROR",
                    e.getErrMsg().c_str(),
                    "Teledyne::read_temperatureTarget");
    }	 
	
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_temperatureTarget
}
//--------------------------------------------------------
/**
 *	Write attribute temperatureTarget related method
 *	Description: Set the Temperature target of the detector (in Celsius)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::write_temperatureTarget(Tango::WAttribute &attr)
{
	INFO_STREAM << "Teledyne::write_temperatureTarget(Tango::WAttribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::write_temperatureTarget) ENABLED START -----*/
    try
    {
        attr.get_write_value(attr_temperatureTarget_write);
		if(!m_hw)
		{
        	m_hw->setSensorTemperatureSetpoint(attr_temperatureTarget_write);  
		}      
    }
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    "TANGO_DEVICE_ERROR",
                    string(df.errors[0].desc).c_str(),
                    "Teledyne::write_temperatureTarget");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     "TANGO_DEVICE_ERROR",
                     e.getErrMsg().c_str(),
                     "Teledyne::write_temperatureTarget");
    }	 
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::write_temperatureTarget
}
//--------------------------------------------------------
/**
 *	Read attribute gain related method
 *	Description: Define the gain of the detector [LOW, MEDIUM, HIGH]
 *
 *	Data type:	Tango::DevEnum (gainEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Teledyne::read_gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_gain) ENABLED START -----*/
	//	Set the attribute value
	
	try
	{
		Tango::DevShort* devShortValue = (Tango::DevShort *)GainMode::LOW;
		if( m_hw != 0)
		{
			lima::Princeton::Interface::GainType gain = m_hw->getAdcAnalogGain();
			//Tango::DevShort* devShortValue;

			switch (gain)
			{
				case lima::Princeton::Interface::GainType::Gain_Low:
					devShortValue = (Tango::DevShort *)GainMode::LOW;
					break;

				case lima::Princeton::Interface::GainType::Gain_Medium:
					devShortValue = (Tango::DevShort *)GainMode::MEDIUM;
					break;

				case lima::Princeton::Interface::GainType::Gain_High:
					devShortValue = (Tango::DevShort *)GainMode::HIGH;
					break;
			}
		}

		attr.set_value((Tango::DevShort*) &devShortValue);
	}
    catch(Tango::DevFailed & df)
    {
		ERROR_STREAM << df << endl;
		//- rethrow exception
        Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
					string(df.errors[0].desc).c_str(),
					"Teledyne::read_gain");
    }
    catch(Exception & e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
					e.getErrMsg().c_str(),
					"Teledyne::read_gain");
    }

	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_gain
}
//--------------------------------------------------------
/**
 *	Write attribute gain related method
 *	Description: Define the gain of the detector [LOW, MEDIUM, HIGH]
 *
 *	Data type:	Tango::DevEnum (gainEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::write_gain(Tango::WAttribute &attr)
{
	INFO_STREAM << "Teledyne::write_gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	gainEnum	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Teledyne::write_gain) ENABLED START -----*/

	try
	{
		attr_gain_write = w_val;
		lima::Princeton::Interface::GainType enum_gain_value;
		switch (attr_gain_write)
		{
			case GainMode::LOW:
				enum_gain_value = lima::Princeton::Interface::GainType::Gain_Low;
				break;

			case GainMode::MEDIUM:
				enum_gain_value = lima::Princeton::Interface::GainType::Gain_Medium;
				break;

			case GainMode::HIGH:
				enum_gain_value = lima::Princeton::Interface::GainType::Gain_High;
				break;
		}
		m_hw->setAdcAnalogGain(enum_gain_value);
		yat4tango::PropertyHelper::set_memorized_attribute<Tango::DevUShort>(this, "gain", w_val);
	}
	
	catch (Tango::DevFailed &df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
					string(df.errors[0].desc).c_str(),
					"Teledyne::write_gain");
	}
	catch (Exception &e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
					e.getErrMsg().c_str(),
					"Teledyne::write_gain");
	}
	/*----- PROTECTED REGION END -----*/	//	Teledyne::write_gain
}
//--------------------------------------------------------
/**
 *	Read attribute adcRate related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Teledyne::read_adcRate(Tango::Attribute &attr)
{
	//DEBUG_STREAM << "Teledyne::read_adcRate(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Teledyne::read_adcRate) ENABLED START -----*/
	//	Set the attribute value
	//attr.set_value(attr_adcRate_read);
	
	try 
	{
		if( m_hw != 0)
		{
			*attr_adcRate_read = m_hw->getAdcSpeed();   
		}
		else
		{
			*attr_adcRate_read = 0.0;
		}
	}
	catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
		Tango::Except::re_throw_exception(df,
					"TANGO_DEVICE_ERROR",
                	std::string(df.errors[0].desc).c_str(),
                	"Teledyne::read_adcRate");
    }		
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    "TANGO_DEVICE_ERROR",
                    e.getErrMsg().c_str(),
                    "Teledyne::read_adcRate");
    }	 
	/*----- PROTECTED REGION END -----*/	//	Teledyne::read_adcRate
}

//--------------------------------------------------------
/**
 *	Method      : Teledyne::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Teledyne::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Teledyne::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState Teledyne::dev_state()
{
	//DEBUG_STREAM << "Teledyne::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Teledyne::dev_state) ENABLED START -----*/
	
	Tango::DevState    argout = DeviceImpl::dev_state();

    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if(!m_is_device_initialized )
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();		
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::dev_state
}
//--------------------------------------------------------
/**
 *	Method      : Teledyne::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Teledyne::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Teledyne::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Teledyne::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Teledyne::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------

/*----- PROTECTED REGION END -----*/	//	Teledyne::namespace_ending
} //	namespace
